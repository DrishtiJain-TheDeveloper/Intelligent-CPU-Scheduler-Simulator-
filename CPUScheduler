import java.util.*;


// Main Class to handle user input and call appropriate scheduling algorithm
class CPUScheduler {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        
        System.out.println("Choose scheduling algorithm:\n1: FCFS\n2: SJF Non-Preemptive\n3: SJF Preemptive\n4: Priority Non-Preemptive");
        int choice = sc.nextInt();
        
        System.out.print("Enter number of processes: ");
        int n = sc.nextInt();
        
        int pid[] = new int[n]; // Process IDs
        int arrivalTime[] = new int[n];
        int burstTime[] = new int[n];
        int priority[] = null;  // Only used for Priority Scheduling
        
        // If user chooses Priority Scheduling, initialize priority array
        if (choice == 4) {
            priority = new int[n];
        }
        
        for (int i = 0; i < n; i++) {
            System.out.println("Enter arrival time and burst time for Process " + (i + 1) + ": ");
            pid[i] = i + 1;
            arrivalTime[i] = sc.nextInt();
            burstTime[i] = sc.nextInt();
            
            // Take priority input **only if user selected Priority Scheduling**
            if (choice == 4) {
                System.out.print("Enter priority for Process " + (i + 1) + ": ");
                priority[i] = sc.nextInt();
            }
        }
        
        // Call the appropriate scheduling algorithm
        if (choice == 1) {
            new FCFS().schedule(n, pid, arrivalTime, burstTime);
        } 
        else if (choice == 2) {
            new SJFNonPreemptive().schedule(n, pid, arrivalTime, burstTime);
        } 
        else if (choice == 3) {
            new SJFPreemptive().schedule(n, pid, arrivalTime, burstTime);
        } 
        else if (choice == 4) {
            new PriorityNonPreemptive().schedule(n, pid, arrivalTime, burstTime, priority);
        } 
        else {
            System.out.println("Invalid choice!");
        }

        sc.close();
    }
}




class FCFS {
    public void schedule(int n, int pid[], int at[], int bt[]) {
        int ct[] = new int[n];
        int tat[] = new int[n];
        int wt[] = new int[n];
        int time = 0;

        // Sorting processes by arrival time
        for (int i = 0; i < n - 1; i++) {
            for (int j = i + 1; j < n; j++) {
                if (at[i] > at[j]) {
                    // Swap arrival times
                    int temp = at[i];
                    at[i] = at[j];
                    at[j] = temp;
                    
                    // Swap burst times
                    temp = bt[i];
                    bt[i] = bt[j];
                    bt[j] = temp;
                    
                    // Swap process IDs
                    temp = pid[i];
                    pid[i] = pid[j];
                    pid[j] = temp;
                }
            }
        }

        for (int i = 0; i < n; i++) {
            if (time < at[i]) time = at[i];
            ct[i] = time + bt[i];
            tat[i] = ct[i] - at[i];
            wt[i] = tat[i] - bt[i];
            time = ct[i];
        }
        printResults(n, pid, at, bt, ct, tat, wt);
    }
    
    private void printResults(int n, int pid[], int at[], int bt[], int ct[], int tat[], int wt[]) {
        System.out.println("PID  AT  BT  CT  TAT  WT");
        for (int i = 0; i < n; i++) {
            System.out.println(pid[i] + "    " + at[i] + "   " + bt[i] + "   " + ct[i] + "   " + tat[i] + "   " + wt[i]);
        }
    }
}
